{"version":3,"file":"lifecycle.min.js","sources":["../src/lifecycle.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport notification from 'core/notification';\n\n// Default auto suggested read-only date.\nlet defaultfreezedate = '';\n// The datepicker original value before user make any changes.\nlet originalfreezedatevalue = '';\n\nexport const init = (courseid) => {\n    // The course is read-only. Do nothing.\n    if (!document.getElementById('lifecycle-settings-container')) {\n        return;\n    }\n\n    initscheduledfreezedateblock(courseid);\n    // On click listener for \"Disable Automatic Read-Only\" toggle.\n    document.getElementById('togglefreezebutton').addEventListener('click', (event) => {\n        togglefreezebutton(event.target.checked);\n    });\n\n    // Save button.\n    document.getElementById('update_auto_freezing_preferences_button').addEventListener('click', () => {\n        updatepreferences(courseid);\n    });\n\n    // Drop down settings button.\n    document.getElementById('override-freeze-date-button').addEventListener(\"click\", function(e) {\n        e.preventDefault();\n        togglesettings();\n    });\n};\n\n/**\n * Disable read-only date input when \"Disable Automatic Read-Only button\" is on.\n *\n * @param {boolean} checked\n */\nfunction togglefreezebutton(checked) {\n    let readonlydateinput = document.getElementById('delayfreezedate');\n    if (checked) {\n        readonlydateinput.value = '';\n        readonlydateinput.disabled = true;\n    } else {\n        readonlydateinput.disabled = false;\n    }\n}\n\n/**\n * Toggle the automatic read only settings container.\n */\nfunction togglesettings() {\n    let content = document.getElementById('automatic-read-only-settings');\n    document.getElementById('override-freeze-date-button').classList.toggle('active');\n    if (content.style.maxHeight) {\n        content.style.maxHeight = null;\n    } else {\n        content.style.maxHeight = content.scrollHeight + \"px\";\n    }\n}\n\n/**\n * Validate the preferences.\n * @return {boolean}\n */\nfunction validate() {\n    let freezedateelement = document.getElementById('delayfreezedate');\n\n    if (freezedateelement.value.length > 0) {\n        // The default suggested date is not initialized, so cannot continue the checking.\n        if (defaultfreezedate === '') {\n                notification.alert(\n                    'Error',\n                    'Could not get the automatically suggested date, please try again later.',\n                    'OK'\n                );\n            freezedateelement.value = originalfreezedatevalue;\n            return false;\n        } else {\n            let defaultfreezedateobj = new Date(defaultfreezedate);\n            let freezedateobj = new Date(freezedateelement.value);\n\n            // The override freeze date should not be saved when it is earlier than the default suggested date.\n            if (freezedateobj < defaultfreezedateobj || freezedateobj < new Date()) {\n                notification.alert(\n                    'Invalid Selection',\n                    'The date for a Read-Only override must be post the automatically suggested date (' +\n                    defaultfreezedateobj.toLocaleDateString() +\n                    '), earlier dates may not be used.',\n                    'OK'\n                );\n                freezedateelement.value = originalfreezedatevalue;\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n/**\n * Initialize the scheduled freeze date container.\n *\n * @param {int} courseid\n */\nfunction initscheduledfreezedateblock(courseid) {\n    let scheduledfreezedatecontainer = document.getElementById('scheduled-freeze-date-container');\n    originalfreezedatevalue = document.getElementById('delayfreezedate').value;\n\n    // Hide scheduled read-only date text at the beginning.\n    scheduledfreezedatecontainer.style.display = 'none';\n\n    // Get scheduled read-only dates.\n    Ajax.call([{\n        methodname: 'block_lifecycle_get_scheduled_freeze_date',\n        args: {\n            'courseid': courseid\n        },\n    }])[0].done(function(response) {\n        // Show scheduled date.\n        if (!document.getElementById('togglefreezebutton').checked) {\n            document.getElementById('scheduled-freeze-date').innerHTML = response.scheduledfreezedate;\n            scheduledfreezedatecontainer.style.display = 'block';\n        } else {\n            // Disable read-only date input depends on freeze button status.\n            togglefreezebutton(true);\n        }\n        // Set the default suggested date.\n        if (response.success === 'true') {\n            defaultfreezedate = response.defaultfreezedate;\n        }\n    }).fail(function(err) {\n        window.console.log(err);\n    });\n}\n\n/**\n * Update the auto context freezing preferences.\n * @param {int} courseid\n */\nfunction updatepreferences(courseid) {\n    let preferences = {\n        togglefreeze: document.getElementById('togglefreezebutton').checked,\n        delayfreezedate: document.getElementById('delayfreezedate').value\n    };\n\n    if (validate()) {\n        Ajax.call([{\n            methodname: 'block_lifecycle_update_auto_freezing_preferences',\n            args: {\n                'courseid': courseid,\n                'preferences': JSON.stringify(preferences)\n            },\n        }])[0].done(function(response) {\n            notification.addNotification({\n                message: response.message,\n                type: response.success ? 'success' : 'error'\n            });\n            initscheduledfreezedateblock(courseid);\n            togglesettings();\n        }).fail(function(err) {\n            window.console.log(err);\n        });\n    }\n}\n"],"names":["defaultfreezedate","originalfreezedatevalue","togglefreezebutton","checked","readonlydateinput","document","getElementById","value","disabled","togglesettings","content","classList","toggle","style","maxHeight","scrollHeight","initscheduledfreezedateblock","courseid","scheduledfreezedatecontainer","display","call","methodname","args","done","response","innerHTML","scheduledfreezedate","success","fail","err","window","console","log","addEventListener","event","target","preferences","togglefreeze","delayfreezedate","freezedateelement","length","alert","defaultfreezedateobj","Date","freezedateobj","toLocaleDateString","validate","JSON","stringify","addNotification","message","type","updatepreferences","e","preventDefault"],"mappings":"kXAIIA,kBAAoB,GAEpBC,wBAA0B,YA+BrBC,mBAAmBC,aACpBC,kBAAoBC,SAASC,eAAe,mBAC5CH,SACAC,kBAAkBG,MAAQ,GAC1BH,kBAAkBI,UAAW,GAE7BJ,kBAAkBI,UAAW,WAO5BC,qBACDC,QAAUL,SAASC,eAAe,gCACtCD,SAASC,eAAe,+BAA+BK,UAAUC,OAAO,UACpEF,QAAQG,MAAMC,UACdJ,QAAQG,MAAMC,UAAY,KAE1BJ,QAAQG,MAAMC,UAAYJ,QAAQK,aAAe,cAgDhDC,6BAA6BC,cAC9BC,6BAA+Bb,SAASC,eAAe,mCAC3DL,wBAA0BI,SAASC,eAAe,mBAAmBC,MAGrEW,6BAA6BL,MAAMM,QAAU,qBAGxCC,KAAK,CAAC,CACPC,WAAY,4CACZC,KAAM,UACUL,aAEhB,GAAGM,MAAK,SAASC,UAEZnB,SAASC,eAAe,sBAAsBH,QAK/CD,oBAAmB,IAJnBG,SAASC,eAAe,yBAAyBmB,UAAYD,SAASE,oBACtER,6BAA6BL,MAAMM,QAAU,SAMxB,SAArBK,SAASG,UACT3B,kBAAoBwB,SAASxB,sBAElC4B,MAAK,SAASC,KACbC,OAAOC,QAAQC,IAAIH,sBA3HP,SAACZ,UAEZZ,SAASC,eAAe,kCAI7BU,6BAA6BC,UAE7BZ,SAASC,eAAe,sBAAsB2B,iBAAiB,SAAS,SAACC,OACrEhC,mBAAmBgC,MAAMC,OAAOhC,YAIpCE,SAASC,eAAe,2CAA2C2B,iBAAiB,SAAS,qBAsHtEhB,cACnBmB,YAAc,CACdC,aAAchC,SAASC,eAAe,sBAAsBH,QAC5DmC,gBAAiBjC,SAASC,eAAe,mBAAmBC,uBA7E5DgC,kBAAoBlC,SAASC,eAAe,sBAE5CiC,kBAAkBhC,MAAMiC,OAAS,EAAG,IAEV,KAAtBxC,+CACiByC,MACT,QACA,0EACA,MAERF,kBAAkBhC,MAAQN,yBACnB,MAEHyC,qBAAuB,IAAIC,KAAK3C,mBAChC4C,cAAgB,IAAID,KAAKJ,kBAAkBhC,UAG3CqC,cAAgBF,sBAAwBE,cAAgB,IAAID,kCAC/CF,MACT,oBACA,oFACAC,qBAAqBG,qBACrB,oCACA,MAEJN,kBAAkBhC,MAAQN,yBACnB,SAKZ,GAiDH6C,kBACK1B,KAAK,CAAC,CACPC,WAAY,mDACZC,KAAM,UACUL,qBACG8B,KAAKC,UAAUZ,iBAElC,GAAGb,MAAK,SAASC,gCACJyB,gBAAgB,CACzBC,QAAS1B,SAAS0B,QAClBC,KAAM3B,SAASG,QAAU,UAAY,UAEzCX,6BAA6BC,UAC7BR,oBACDmB,MAAK,SAASC,KACbC,OAAOC,QAAQC,IAAIH,QA1IvBuB,CAAkBnC,aAItBZ,SAASC,eAAe,+BAA+B2B,iBAAiB,SAAS,SAASoB,GACtFA,EAAEC,iBACF7C"}