{"version":3,"file":"lifecycle.min.js","sources":["../src/lifecycle.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport notification from 'core/notification';\n\n// Default auto suggested read-only date.\nlet defaultfreezedate = '';\n// The datepicker original value before user make any changes.\nlet originalfreezedatevalue = '';\n\nexport const init = (courseid) => {\n    // The course is read-only. Do nothing.\n    if (!document.getElementById('lifecycle-settings-container')) {\n        return;\n    }\n\n    initscheduledfreezedateblock(courseid);\n    document.getElementById('update_auto_freezing_preferences_button').addEventListener('click', () => {\n        updatepreferences(courseid);\n    });\n\n    document.getElementById('override-freeze-date-button').addEventListener(\"click\", function(e) {\n        e.preventDefault();\n        togglesettings();\n    });\n};\n\n/**\n * Toggle the automatic read only settings container.\n */\nfunction togglesettings() {\n    let content = document.getElementById('automatic-read-only-settings');\n    document.getElementById('override-freeze-date-button').classList.toggle('active');\n    if (content.style.maxHeight) {\n        content.style.maxHeight = null;\n    } else {\n        content.style.maxHeight = content.scrollHeight + \"px\";\n    }\n}\n\n/**\n * Validate the preferences.\n * @return {boolean}\n */\nfunction validate() {\n    let freezedateelement = document.getElementById('delayfreezedate');\n    let togglefreezebutton = document.getElementById('togglefreezebutton');\n\n    // The override freeze date should not be saved when auto read-only is disabled.\n    if (!togglefreezebutton.checked && freezedateelement.value.length > 0) {\n        notification.alert(\n            'Invalid selection',\n            'Please enable automatic read only or remove the overrides Read-Only date.',\n            'OK'\n        );\n        return false;\n    }\n\n    if (freezedateelement.value.length > 0) {\n        // The default suggested date is not initialized, so cannot continue the checking.\n        if (defaultfreezedate === '') {\n                notification.alert(\n                    'Error',\n                    'Could not get the automatically suggested date, please try again later.',\n                    'OK'\n                );\n            freezedateelement.value = originalfreezedatevalue;\n            return false;\n        } else {\n            let defaultfreezedateobj = new Date(defaultfreezedate);\n            let freezedateobj = new Date(freezedateelement.value);\n\n            // The override freeze date should not be saved when it is earlier than the default suggested date.\n            if (freezedateobj < defaultfreezedateobj || freezedateobj < new Date()) {\n                notification.alert(\n                    'Invalid Selection',\n                    'The date for a Read-Only override must be post the automatically suggested date (' +\n                    defaultfreezedateobj.toLocaleDateString() +\n                    '), earlier dates may not be used.',\n                    'OK'\n                );\n                freezedateelement.value = originalfreezedatevalue;\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n/**\n * Initialize the scheduled freeze date container.\n *\n * @param {int} courseid\n */\nfunction initscheduledfreezedateblock(courseid) {\n    let scheduledfreezedatecontainer = document.getElementById('scheduled-freeze-date-container');\n    originalfreezedatevalue = document.getElementById('delayfreezedate').value;\n\n    // Fetch the scheduled course read-only date.\n    if (document.getElementById('togglefreezebutton').checked) {\n        document.getElementById('scheduled-freeze-date').innerHTML = '';\n        scheduledfreezedatecontainer.style.display = 'block';\n        Ajax.call([{\n            methodname: 'block_lifecycle_get_scheduled_freeze_date',\n            args: {\n                'courseid': courseid\n            },\n        }])[0].done(function(response) {\n            document.getElementById('scheduled-freeze-date').innerHTML = response.scheduledfreezedate;\n            // Set the default suggested date.\n            if (response.success === 'true') {\n                defaultfreezedate = response.defaultfreezedate;\n            }\n        }).fail(function(err) {\n            window.console.log(err);\n        });\n    } else {\n        scheduledfreezedatecontainer.style.display = 'none';\n    }\n}\n\n/**\n * Update the auto context freezing preferences.\n * @param {int} courseid\n */\nfunction updatepreferences(courseid) {\n    let preferences = {\n        togglefreeze: document.getElementById('togglefreezebutton').checked,\n        delayfreezedate: document.getElementById('delayfreezedate').value\n    };\n\n    if (validate()) {\n        Ajax.call([{\n            methodname: 'block_lifecycle_update_auto_freezing_preferences',\n            args: {\n                'courseid': courseid,\n                'preferences': JSON.stringify(preferences)\n            },\n        }])[0].done(function(response) {\n            notification.addNotification({\n                message: response.message,\n                type: response.success ? 'success' : 'error'\n            });\n            initscheduledfreezedateblock(courseid);\n            togglesettings();\n        }).fail(function(err) {\n            window.console.log(err);\n        });\n    }\n}\n"],"names":["defaultfreezedate","originalfreezedatevalue","togglesettings","content","document","getElementById","classList","toggle","style","maxHeight","scrollHeight","initscheduledfreezedateblock","courseid","scheduledfreezedatecontainer","value","checked","innerHTML","display","call","methodname","args","done","response","scheduledfreezedate","success","fail","err","window","console","log","addEventListener","preferences","togglefreeze","delayfreezedate","freezedateelement","length","alert","defaultfreezedateobj","Date","freezedateobj","toLocaleDateString","validate","JSON","stringify","addNotification","message","type","updatepreferences","e","preventDefault"],"mappings":"kXAIIA,kBAAoB,GAEpBC,wBAA0B,YAsBrBC,qBACDC,QAAUC,SAASC,eAAe,gCACtCD,SAASC,eAAe,+BAA+BC,UAAUC,OAAO,UACpEJ,QAAQK,MAAMC,UACdN,QAAQK,MAAMC,UAAY,KAE1BN,QAAQK,MAAMC,UAAYN,QAAQO,aAAe,cA2DhDC,6BAA6BC,cAC9BC,6BAA+BT,SAASC,eAAe,mCAC3DJ,wBAA0BG,SAASC,eAAe,mBAAmBS,MAGjEV,SAASC,eAAe,sBAAsBU,SAC9CX,SAASC,eAAe,yBAAyBW,UAAY,GAC7DH,6BAA6BL,MAAMS,QAAU,sBACxCC,KAAK,CAAC,CACPC,WAAY,4CACZC,KAAM,UACUR,aAEhB,GAAGS,MAAK,SAASC,UACjBlB,SAASC,eAAe,yBAAyBW,UAAYM,SAASC,oBAE7C,SAArBD,SAASE,UACTxB,kBAAoBsB,SAAStB,sBAElCyB,MAAK,SAASC,KACbC,OAAOC,QAAQC,IAAIH,SAGvBb,6BAA6BL,MAAMS,QAAU,qBA5GjC,SAACL,UAEZR,SAASC,eAAe,kCAI7BM,6BAA6BC,UAC7BR,SAASC,eAAe,2CAA2CyB,iBAAiB,SAAS,qBA6GtElB,cACnBmB,YAAc,CACdC,aAAc5B,SAASC,eAAe,sBAAsBU,QAC5DkB,gBAAiB7B,SAASC,eAAe,mBAAmBS,uBApF5DoB,kBAAoB9B,SAASC,eAAe,uBACvBD,SAASC,eAAe,sBAGzBU,SAAWmB,kBAAkBpB,MAAMqB,OAAS,+BACnDC,MACT,oBACA,4EACA,OAEG,KAGPF,kBAAkBpB,MAAMqB,OAAS,EAAG,IAEV,KAAtBnC,+CACiBoC,MACT,QACA,0EACA,MAERF,kBAAkBpB,MAAQb,yBACnB,MAEHoC,qBAAuB,IAAIC,KAAKtC,mBAChCuC,cAAgB,IAAID,KAAKJ,kBAAkBpB,UAG3CyB,cAAgBF,sBAAwBE,cAAgB,IAAID,kCAC/CF,MACT,oBACA,oFACAC,qBAAqBG,qBACrB,oCACA,MAEJN,kBAAkBpB,MAAQb,yBACnB,SAKZ,GA6CHwC,kBACKvB,KAAK,CAAC,CACPC,WAAY,mDACZC,KAAM,UACUR,qBACG8B,KAAKC,UAAUZ,iBAElC,GAAGV,MAAK,SAASC,gCACJsB,gBAAgB,CACzBC,QAASvB,SAASuB,QAClBC,KAAMxB,SAASE,QAAU,UAAY,UAEzCb,6BAA6BC,UAC7BV,oBACDuB,MAAK,SAASC,KACbC,OAAOC,QAAQC,IAAIH,QAjIvBqB,CAAkBnC,aAGtBR,SAASC,eAAe,+BAA+ByB,iBAAiB,SAAS,SAASkB,GACtFA,EAAEC,iBACF/C"}